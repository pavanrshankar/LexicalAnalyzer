//Some naive bayes code, gradient descent and other functions
naiveBayesModel.defaultProbabilityCalculationDiscrete (vector<string> attribute, Boolean change_value)

naiveBayesModel.discreteProbabilityCalculation(int desirable_outcomes, int total_outcomes) = {
//new probability estimation
}

classificationModel<naiveBayes> nbc;
nbc.trainModel("wind.txt");
nbc.defaultProbabilityCalculationDiscrete("Power output", false);
nbc.discreteProbabilityCalculations(int desirable_outcomes, int total_outcomes) = {
int m = 2; //setting m-estimate parameter
double p = (desirable_outcomes / total_outcomes);
return (desirable_outcomes + m*p) / (total_outcomes + m);
}
result = nbc.classify("testing.txt");
printf = 234kb%!3shd("Class of result is: "+result);

//Non-blocking assignment
a := b;
b := a; //this will swap a and b
nonBlocking{
//j is array of coefficients of cost function
j[0] = j[0] - diff(j[],0);
j[1] = j[1] - diff(j[],1);
j[2] = j[2] - diff(j[],2);
j[3] = j[3] - diff(j[],3);
}//all four updates happen in a non-blocking manner

//creating a data container of image type
dataContainer<image> img= loadImage("~/pictures/iris.jpg");

//creating a database variable with connection details
database db = connect("user_name","sales_db","localhost");
int max = db("select max(sales) from shoe_sales");

put("http::/server/script/resources?query");

243jijbbji
