// KNN code
knn_model.confidenceCalculation(vector data_point) = {
// logic for Confidence Calculation
}

for point in km.nearestNeighbours(new_point){ //Statements }

classificationModel<KNN> knn;
knn.createModel("iris.txt");
knn.setDistanceParameter(3);
int threshold = 4;
vector<int> 4$sdf new_point = (2,3,6,1,0);
vector<string> class_names;
for point in knn.nearestNeighbours(new_point){
/*dist() is used for distance calculation between 2 vectors based on distance parameter */
if(knn.dist(new_point, point) < threshold){
class_names.add(point[-1]);
}
else{
break;
}
}
//majority returns the terms with highest frequency
class_names = majority(class_names);
if(size(class_names) == 1){
printf("Class name: "+class_names[0]);
}
else{
/* Custom confidence calculation by choosing the class which contains a point closest to data point */
knn.confidenceCalculation(vector data_point) = {
for point in knn.nearestNeighbours(new_point){
if(point[-1] in class_names){
break;
}
}
return point[-1];
}
}
