// Neural networks demo
classificationModel<ANN> myNet;
myNet.inputLayer="input";
myNet.outputLayer="output";
myNet.learningRate=0.4;
myNet.layer["input"].addNodes(4); //adds 4 nodes to layer named input
myNet.layer["output"].addNodes(1);
myNet.layer["hidden"].addNodes(2);
//layer["foo"] will create a new layer named foo if not present
myNet.layer["hidden"][1].weights = { <"input",1>: 0.5, <"input",2>: 0.5 };
myNet.layer["hidden"][2].weights = { <"input",3>: 0.5, <"input",4>: 0.5 };
myNet.layer["output"][1].weights = { <"hidden",1>: 0.5, <"hidden",2>: 0.5 };
for level in myNet.layer{
for node in myNet.layer(level){
myNet.layer["hidden"][i].stepFunction = "sigmoid";
myNet.layer["hidden"][i].threshold = 0.46;
}
}
/*Now training model,
testing &
using model*/
myNet.trainModel("neuralTrainingData.csv");
testResults<ANN> annres= myNet.testModel("neuralTestingData.csv");
printf("ANN model test results");
vector<int> sample = {3.5, 2.47452, 0.004112, 124};
int result = myNet.classify(sample);
vector<int> irisResults = myNet.classifyFromFile("irisData.csv");
